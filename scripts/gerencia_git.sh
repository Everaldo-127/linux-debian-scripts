#!/bin/bash

LOG_FILE="/var/log/LOG_GITHUB.txt"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | sudo tee -a "$LOG_FILE" >/dev/null
}

if [[ $EUID -ne 0 ]]; then
    echo "Por favor, execute como root para que o script possa escrever no arquivo de log em /var/log."
    exit 1
fi

check_git() {
    if ! command -v git >/dev/null 2>&1; then
        echo "Git n√£o est√° instalado. Instalando..."
        log "Git n√£o est√° instalado. Instalando..."
        sudo apt-get update && sudo apt-get install -y git
    fi
    echo "Git est√° instalado."
    log "Git est√° instalado."

    if ! git config --global user.email >/dev/null 2>&1 || [ -z "$(git config --global user.email)" ]; then
        read -p "Digite o e-mail para configura√ß√£o do Git: " GIT_EMAIL
        git config --global user.email "$GIT_EMAIL"
        log "user.email configurado como $GIT_EMAIL"
    fi
    if ! git config --global user.name >/dev/null 2>&1 || [ -z "$(git config --global user.name)" ]; then
        read -p "Digite o nome de usu√°rio para configura√ß√£o do Git: " GIT_NAME
        git config --global user.name "$GIT_NAME"
        log "user.name configurado como $GIT_NAME"
    fi
}

check_dependencies() {
    local dependencies=("curl" "jq" "rsync")
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            echo "Depend√™ncia $dep n√£o est√° instalada. Instalando..."
            sudo apt-get install -y "$dep"
            log "Depend√™ncia $dep instalada."
        fi
    done
    echo "Todas as depend√™ncias est√£o instaladas."
    log "Todas as depend√™ncias est√£o instaladas."
}

get_credentials() {
    read -p "Digite seu nome de usu√°rio do GitHub: " GITHUB_USER
    read -sp "Digite seu token de acesso pessoal do GitHub (com permiss√£o repo): " GITHUB_TOKEN
    echo
    if [[ -z "$GITHUB_USER" || -z "$GITHUB_TOKEN" ]]; then
        echo "Credenciais incompletas. Abortando."
        log "Credenciais incompletas. Abortando."
        exit 1
    fi
}

check_response() {
    local http_code=$1
    local operation=$2
    if [[ "$operation" == "delete" && "$http_code" == "204" ]]; then
        return 0
    elif [[ "$operation" == "rename" && "$http_code" == "200" ]]; then
        return 0
    else
        return 1
    fi
}

create_repository() {
    get_credentials
    read -p "Digite o nome do novo reposit√≥rio: " REPO_NAME
    if [[ -z "$REPO_NAME" ]]; then
        echo "Nome do reposit√≥rio n√£o pode ser vazio."
        return
    fi
    read -p "Digite uma descri√ß√£o para o reposit√≥rio (opcional): " REPO_DESC
    read -p "O reposit√≥rio ser√° privado? (y/n): " IS_PRIVATE
    PRIVATE_FLAG=false
    [[ "$IS_PRIVATE" =~ ^[Yy]$ ]] && PRIVATE_FLAG=true
    local URL="https://api.github.com/user/repos"
    local DATA="{\"name\":\"${REPO_NAME}\",\"description\":\"${REPO_DESC}\",\"private\":${PRIVATE_FLAG}}"
    echo "Criando reposit√≥rio '$REPO_NAME'..."
    HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u "${GITHUB_USER}:${GITHUB_TOKEN}" \
        -H "Content-Type: application/json" -d "$DATA" "$URL")
    if [[ "$HTTP_RESPONSE" == "201" ]]; then
        echo "Reposit√≥rio '$REPO_NAME' criado com sucesso."
        log "Reposit√≥rio '$REPO_NAME' criado com sucesso pelo usu√°rio $GITHUB_USER."
    else
        echo "Falha ao criar o reposit√≥rio. C√≥digo HTTP: $HTTP_RESPONSE"
        log "Falha ao criar o reposit√≥rio '$REPO_NAME'. C√≥digo HTTP: $HTTP_RESPONSE"
    fi
}

rename_repository() {
    read -p "Digite o nome atual do reposit√≥rio: " OLD_NAME
    read -p "Digite o novo nome do reposit√≥rio: " NEW_NAME
    read -p "Confirma a renomea√ß√£o de '$OLD_NAME' para '$NEW_NAME'? (y/n): " CONFIRM
    [[ "$CONFIRM" =~ ^[Yy]$ ]] || return
    get_credentials
    local URL="https://api.github.com/repos/${GITHUB_USER}/${OLD_NAME}"
    local DATA="{\"name\":\"${NEW_NAME}\"}"
    HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH -u "${GITHUB_USER}:${GITHUB_TOKEN}" \
        -H "Content-Type: application/json" -d "$DATA" "$URL")
    if check_response "$HTTP_RESPONSE" "rename"; then
        echo "Reposit√≥rio renomeado com sucesso para '$NEW_NAME'."
        log "Reposit√≥rio '$OLD_NAME' renomeado para '$NEW_NAME'."
    else
        echo "Falha ao renomear reposit√≥rio. HTTP $HTTP_RESPONSE"
    fi
}

delete_repository() {
    read -p "Digite o nome do reposit√≥rio a ser exclu√≠do: " REPO_NAME
    read -p "Confirma exclus√£o de '$REPO_NAME'? (y/n): " CONFIRM
    [[ "$CONFIRM" =~ ^[Yy]$ ]] || return
    get_credentials
    local URL="https://api.github.com/repos/${GITHUB_USER}/${REPO_NAME}"
    HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -u "${GITHUB_USER}:${GITHUB_TOKEN}" "$URL")
    if check_response "$HTTP_RESPONSE" "delete"; then
        echo "Reposit√≥rio '$REPO_NAME' exclu√≠do com sucesso."
        log "Reposit√≥rio '$REPO_NAME' exclu√≠do."
    else
        echo "Falha ao excluir reposit√≥rio. HTTP $HTTP_RESPONSE"
    fi
}

clonar_repository() {
    get_credentials
    read -p "Digite o nome do reposit√≥rio do seu usu√°rio para clonar: " REPO_NAME
    local DEST_DIR="$REPO_NAME"
    local REPO_URL="https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_USER}/${REPO_NAME}.git"
    echo "Clonando reposit√≥rio pr√≥prio '$REPO_NAME'..."
    if git clone "$REPO_URL" "$DEST_DIR"; then
        echo "Reposit√≥rio '$REPO_NAME' clonado com sucesso."
        log "Clonado reposit√≥rio pr√≥prio: $REPO_NAME"
    else
        echo "Falha ao clonar reposit√≥rio '$REPO_NAME'."
        log "Falha ao clonar reposit√≥rio pr√≥prio: $REPO_NAME"
    fi
}

clonar_terceiros() {
    read -p "Digite a URL do reposit√≥rio p√∫blico para clonar: " URL
    echo "Clonando reposit√≥rio p√∫blico de terceiros..."
    if git clone "$URL"; then
        echo "Reposit√≥rio p√∫blico clonado com sucesso."
        log "Clonado reposit√≥rio p√∫blico de terceiros: $URL"
    else
        echo "Falha ao clonar reposit√≥rio p√∫blico."
        log "Falha ao clonar reposit√≥rio p√∫blico: $URL"
    fi
}

enviar_para_github() {
    DIR_ATUAL=$(pwd)
    get_credentials
    read -p "Digite os nomes dos reposit√≥rios do seu usu√°rio (separados por espa√ßo): " REPOSITORIOS
    read -p "Mensagem base do commit: " MENSAGEM_COMMIT
    for REPO in $REPOSITORIOS; do
        log "üìÇ Processando reposit√≥rio: $REPO"
        TMP_DIR=$(mktemp -d)
        git clone --depth=1 "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_USER}/${REPO}.git" "$TMP_DIR" || {
            log "‚ùå Falha ao clonar reposit√≥rio remoto $REPO"
            rm -rf "$TMP_DIR"
            continue
        }
        cd "$TMP_DIR" || continue
        git checkout main || git checkout -b main
        cd "$DIR_ATUAL" || continue
        rsync -a --exclude='.git' "$DIR_ATUAL"/ "$TMP_DIR"/
        cd "$TMP_DIR" || continue
        git add .
        if git diff --cached --quiet; then
            log "‚ö†Ô∏è Sem altera√ß√µes para commit no reposit√≥rio $REPO."
        else
            git commit -m "$MENSAGEM_COMMIT [$(date '+%Y-%m-%d %H:%M:%S')]"
            git push origin main && log "‚úÖ Push realizado com sucesso no reposit√≥rio $REPO" || log "‚ùå Falha no push no reposit√≥rio $REPO"
        fi
        cd "$DIR_ATUAL" || continue
        rm -rf "$TMP_DIR"
    done
    log "=== ENVIO FINALIZADO ==="
}

main_menu() {
    while true; do
        echo
        echo "=========== Menu GitHub ==========="
        echo "1) Criar reposit√≥rio"
        echo "2) Renomear reposit√≥rio"
        echo "3) Excluir reposit√≥rio"
        echo "4) Clonar reposit√≥rio pr√≥prio"
        echo "5) Clonar reposit√≥rio p√∫blico de terceiros"
        echo "6) Enviar arquivos para reposit√≥rios"
        echo "7) Sair"
        read -p "Escolha uma op√ß√£o [1-7]: " OPTION
        case "$OPTION" in
            1) create_repository ;;
            2) rename_repository ;;
            3) delete_repository ;;
            4) clonar_repository ;;
            5) clonar_terceiros ;;
            6) enviar_para_github ;;
            7) echo "Saindo..."; exit 0 ;;
            *) echo "Op√ß√£o inv√°lida. Tente novamente." ;;
        esac
    done
}

check_git
check_dependencies
main_menu

